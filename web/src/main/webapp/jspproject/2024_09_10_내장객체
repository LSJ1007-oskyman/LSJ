#내장 객체

request객체
회원가입 양식

-broad
*textarea상에 입력할때 단순히 <%=%>태그로 출력하면 줄 띄어쓰기는 무시되고 붙어서 나온다
*textarea상에 입력할때 줄을 띄어쓰기한것 그대로 JSP에서 받아서 출력하려면 
  1.<pre><%=content %></pre>와 같이 <pre>태그를 둘러서 출력한다.
  2.String에 replace매소드를 이용해서 replace("\n","<br>")로 HTML 줄 바꿈으로 바꾼다.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
respond객체

- response/meta.html
*meta태그로 페이지 이동하면 시간제어하면서 이동하는것이 가능하다.

- response/location.html
*자바스크립트로 페이지 이동하면 새로운 페이지를 띄우는 것이 가능하다.

- response/response.jsp
*JSP에서 리다이렉션 함수를 이용하여 페이지 이동하면 다른 특징없이 바로 이동된다.

out객체

-out/useOut.jsp
*println은 줄바꿈기능이 없다. --->따라서 println안 ""안에 <br>을 넣어야 한다.

-out/useEx.jsp
*기본 버퍼 크기는 8kb이다.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
cookie

쿠키의 동작 순서
1. 클라이언트가 서버의 웹페이지를 요청한다. 
2. 웹 서버에서 쿠키를 생성한다. (보통은 로그인에 성공 했을때 서버에서 쿠키를 발행한다.)
3. 생성한 쿠키에 정보를 담아 HTTP 화면을 돌려줄 때, 쿠키정보를 클라이언트에게 돌려준다.
4. 발행된 쿠키는 클라이언트의 로컬 PC에 저장 가지고 있다가, 서버에서 쿠키정보를 요청할 때 
   발행된 쿠키정보를 전송한다.
5. 동일 사이트 재방문시 클라이언트의 PC에 해당 쿠키가 있는 경우, 요청 페이지와 함께 쿠키를 
   전송한다.

쿠키의 기능
➢ cookie는 서버와 클라이언트가 연결 상태(로그인)를 유지하기 위해서 사용되는 개념이다. 
➢ 보통 로그인에 성공 했을 경우에 서버측에서 쿠키를 발행하고, 발행된 쿠키는 클라이언트의
   임시 폴더에 쿠키 파일이 생성된다.
➢ 서버측에서는 페이지를 이동하면서 클라이언트의 임시 폴더에 발행된 쿠키 정보를 참조하면서
   서버와 클라이언트의 연결 상태(로그인)를  유지한다.
➢ cookie를 사용하면, 페이지 이동을 하면서 회원 정보를 가지고 가지 않아도 된다.


❖ 쿠키의 특징
1. 이름, 값, 만료일(저장 기간 설정), 경로 정보로 구성되어 있다.
2. 클라이언트에 총 300개의 쿠키를 저장할 수 있다.
3. 하나의 도메인 당 20개의 쿠키를 가질 수 있다.
4. 하나의 쿠키는 4KB(=4096byte)까지 저장 가능하다.

 쿠키를 사용하는 경우
1. 로그인 할때 로그인상태 유지나 자동 로그인을 처리할때 쿠키를 사용한다. 
2. 팝업창을 통해 "오늘 이 창을 다시 보지 않기" 체크할때 쿠키를 사용한다.

쿠키 관련 코드
1. 쿠키 생성
Cookie coook = new Cookie(String name, String value);
Cookie cook =  new Cookie("id","test");

2. 쿠키 추가
쿠키를 생성한 후에는 반드시 response객체의 addCookide() 메소드를 사용해서 쿠키를 추가해 주어야 한다.
response.addCookie(cook);

3. 쿠키 값 변경
쿠키 생성후 쿠키의 새로운 이름에 대응하는 값을 새롭게 지정할 때 setValue()메소드를 사용한다.
cook.setValue(newValue);

4. 쿠키의 수명(지속시간) 설정
cook.setMaxAge(int expiry); 단위: 초

5. 쿠키 읽기
Cookie[] cook = request.getCookies();
쿠키의 이름 :  cook.get.Name();
쿠키의 값 : cook.getValue();

*클라이언트 임시폴더에 쿠키값이 저장된다.
*쿠키의 시간 설정은 하지 않으면 브라우저를 닫을때 쿠키가 삭제된다.
*브라우저의 종류가 다르면 다른 종류의 쿠키를 가져오지 못한다.
*쿠키는 따로 삭제하는 메소드가 없어서 지속시간을 0초로 설정해서 삭제한다.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
❖ session
➢ session은 서버와 클라이언트가 연결 상태(로그인)를 유지하기 위해서 사용되는 개념이다. 
➢ 보통 로그인에 성공 했을 경우에 서버측에서 session으로 클라이언트와 연결된다.
   이때 session을 연결한 클라이언트의 웹브라우저를 통해서 회원정보를 공유하게 된다.
➢ session은 cookie와 다르게, 클라이언트의 컴퓨터에 회원정보를 저장하지 않는다.
➢ session을 사용하면, 페이지 이동을 하면서 회원 정보를 가지고 가지 않아도 된다.

세션 관련 코드

1. 세션 설정
name으로 지정한 이름에 value값을 할당한다.
session.setAttribute(java.lang.String name, java.lang.Object value)
예)session.setAttribute("id","guardian23")

2.세션 사용
name이란 이름에 해당되는 속성값을 object타입으로 변환한다.
session.getAttribute(java.lang.String name)
예) String id = (String)session.getAttribute("id"); <-----다운 캐스팅함을 유의하자

3.세션의 유지시간 설정
세션의 최대 유지시간을 초 단위로 설정한다.
session.setMaxInactiveInterval();

4.세션 삭제
name으로 지정한 속성 값을 제거한다.
session.removeAttribute(java.lang.String name);
예)session.removeAttribute("id");

5. 모든 세션 삭제
현재 생성된 세션을 무효화 시킨다.
session.invalidate();


*서버에서 세션의 name값을 모르는 경우 enumeration클래스(열거 클래스)를 통해서 세션객체를 받을 수 있으나 잘 사용하지는 않는다.--->왜냐하면 대부분의 경우 name값을 알고 있는 상태에서 사용하기 때문이다.
*세션에서 value값은 Object클래스인데 서버에서 value값을 불러올때는 본래 자료형으로 다운캐스팅하여 불러와야 한다.
*브라우저 종류가 달라지면 세션은 공유하지 못한다.
