리렌더링의 조건
대표적인 리렌더링의 조건으로는 다음이 있다.

1.컴포넌트의 state가 변했을 때
2.props의 값이 변했을 때
3.부모 컴포넌트가 렌더링 되었을 때

useState
- hooks01/Info.js
1.  useState사용시 변경하는 변수(set~)를 직접가져와서 변경하는것도 가능하다.
2.  그러나 이벤트에 따른 값변경을 위한 사용자 지정 함수를 만드는 것이 보기에 편하다.
3.  input태그의 타입값을 안쓰면 기본적으로 text로 된다.
4.  target.value를 통해서 매개변수의 입력된 값을 가져올 수 있다.

- hooks01/Average.js
1.  concat은 본래있던 배열에 추가할 요소를 붙여서 새로운 배열을 만들어주는 함수이다.
2.  map은 배열을 효과적으로 출력할 수 있는 함수이다.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
useEffect
1. useEffect는 리액트 컴포넌트가 렌더링될 때마다 특정 작업이 수행하도록  
    설정  할 수 있는 훅(hooks)이다.
2. 컴포넌트가 마운트됐을때(처음나타났을때),언마운트됐을때(사라 질때)   
    업데이트될때(특정props가 바뀔때)처리할수있는 훅이다.

마운트 될 때
1.  props로 받은 값을 컴포넌트의 state로 설정할 때
2.  컴포넌트가 나타나면 외부 API (REST API)를 요청해야 할 때
3.  라이브러리를 사용할 때 (D3, Video.js 등)
4.  setInterval이나 setTimeout과 같은 작업

언마운트 될 때
1.setInterval, setTimeout을 사용해서 등록했던 작업을 제거할 때 즉, clearInterval이나 clearTimeout과 같은 작업
2.라이브러리 인스턴스를 만들었다면, 이 인스턴스를 제거할 때


1. useEffect는 리액트 컴포넌트가 렌더링될 때마다 특정 작업이 수행하도록  
    설정  할 수 있는 훅(hooks)이다.
2. 컴포넌트가 마운트됐을때(처음나타났을때),언마운트됐을때(사라 질때)   
    업데이트될때(특정props가 바뀔때)처리할수있는 훅이다.

- hooks02/Counter2.js
1.  useEffect(함수,listen할 변수 배열)의 형태로 사용함
2.  listen할 변수 배열 자리에 빈 배열을 넣으면 마운트될때와 언마운트 될때만 실행한다.
    useEffect(()=>{
        console.log('마운트될 때만 실행됩니다.');
    },[]);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Event Handler

Event 처리할때 주의사항
1. 이벤트 이름은 카멜 표기법으로 작성한다.
 onclick    --->   onClick
 onchange   --->   onChange      
 onkeyup    --->   onKeyUp
 2. DOM 요소에서만 이벤트를 설정 할 수 있다.
 div, button, input, form, span 등의 DOM 요소에는 이벤트를 설정할 수 있지만, 우리가 직접 만든 컴포넌트에는 이벤트를 설정 할 수 없다.
 <button onClick={  }> 클릭 </button>  (0)
 <MyComponent onClick={ } />           (x) 

DOM(Document Object Model)
웹 페이지를 이루는 태그들을 자바스크립트가 이용할 수 있게끔 브라우저가 트리구조로 만든 객체 모델을 의미한다.
DOM(Document Object Model)을 영어 뜻풀이 그대로 하자면 문서 객체 모델을 의미한다.
문서 객체란 html, head, body와 같은 태그들을 javascript가 이용할 수 있는 (메모리에 보관할 수 있는) 객체를 의미한다.

 리액트에서 사용하는 ReactDOM은 도대체 또 무엇일까? ReactDOM은 VirtualDOM이라고 한다. ReactDOM에 대해 알아보기 전에 VirtualDOM이 무엇인지 먼저 알아보자.
Instagram이나 Facebook, YouTube같은 홈페이지를 생각해보자. 이러한 서비스들은 스크롤이 무한에 가깝게 계속 내려가며 스크롤이 될 때마다 새로운 데이터들을 서버에서 불러온다. 
불러온 데이터에 따라서 UI는 계속해서 업데이트 될 것이다. 수많은 Document의 elements를 가진 서비스들이 계속해서 데이터가 실제 DOM에 직접적으로 접근하여 업데이트 된다면 
이는 분명 무리가 될 것이라고 판단이 된다. 이는 곧 서비스의 이슈로 이어질 것 같다고 생각이 든다. 
DOM 자체는 빠르지만 페이지의 리페인트가 계속해서 발생한다면 속도가 늦춰질 것이라고 생각이 든다. (이는 더 알아본 다음에 다시 정리를 할 예정이다.)
실제 DOM에 접근하게 되면 위와 같은 문제가 발생한다. 이를 해결하기 위해 나타난 것이 Virtual DOM이다.
-    실제 DOM에 직접 접근하는 대신에, 이를 자바스크립트 객체로 구성하여 DOM을 추상화하여 사용하는 방식이다.
-    React를 사용할 때에는 React가 모두 처리를 해주기 때문에, DOM API를 직접 구현하지 않아도 된다.


- event01/Form01.js
1.    event.preventDefault();은 submit시 자동으로 새로고침되는 것을 방지해주는 코드이다.
2.    Submit이벤트는 form에다가 설정해야한다.








