1.카멜표기법으로 CSS설정을 하자.
2.css파일 상에서는 본래 HTML에서 했던것처럼 설정하면된다.
3.외부 CSS파일을 불러올때 class속성대신에 className속성을 사용해야한다.
예를 들어 css파일에 .react선택자 css속성을 설정하면
설정하고싶은 객체에 <div className='react'>와 같이 지정해야한다.
4.REACT프로젝트 상에서는 열린 태그는 반드시 닫아 주어야 한다.
본래 HTML상에서는 <input><br>을 닫을필요가 없었는데 REACT에서는 반드시 닫아야한다.
5.<input/>,<br/>와 같이 열고 닫고를 한번에 수행할 수도 있다.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

component 
 1. 리액트를 사용하여 애플리케이션의 인터페이스를 설계할때 사용자가 볼 수 
있는 요소는 여러가지 컴포넌트로 구성된다.
 2. 컴포넌트를 선언하는 방식은 클래스형 컴포넌트와 함수형 컴포넌트가 있다.
 3. 클래스형 컴포넌트는 state 기능 및 라이프사이클 API를 사용할 수 있다.
 4. 함수형 컴포넌트의 단점은 state와 라이프사이클 API를 사용할 수 없었지만,
리액트 v16.8 이후에 훅(Hooks)이라는 기능이 도입 되면서 해결 되었다.
 5. 리액트 공식 매뉴얼에서는 함수형 컴포넌트와 Hooks을 사용하도록 권장하고 
있다.
 6. 컴포넌트의 첫 글자는 항상 대문자로 시작 해야 한다.-->소문자로 하면 태그로 인식한다.
컴포넌트를 소문자로 시작하면 DOM 태그로 처리한다.
 7. 컴포넌트를 이용해서 UI를 재사용 가능한 개별적인 여러 조각으로 나누고, 
각 조각을 개별적으로 나누어 코딩한다.
 8. 자식 컴포넌트에게 값을 전달할때 props를 사용할 수 있다.

 props
 1. props는 프로퍼티(properties)의 줄임말 이다.
 2. props는 부모 컴포넌트에서 자식 컴포넌트에게 데이터를 전달할 때 
사용한다.
 3. props를 전달받은 자식 컴포넌트에서는 데이터를 수정할 수 없다


- ES6문법으로 함수를 만들면 const App2 = () =>{함수내용} 이렇게 만들어야 한다.
- 자식컴포넌트가 부모컴포넌트의 매개변수를 받을때는 props로 받으면된다.
  props.매개변수명 형태이다.
- 자식컴포넌트가 부모컴포넌트의 태그 사이의 값을 받을 때는 props.children으로 받는다.
- name과 children은 정해진 변수 명이여서 바꿀수 없다.
- ES6의 비구조화 할당 문법을 통해서 const {name , children} = props;이런식으로 매개변수를 할당할 수 있다.
- 함수컴포넌트 선언시 const MyComponent5= ({name,children,favoriteNumber}) =>이런식으로 매개변수를 바로 받아서 사용할 수 있다.
- 부모컴포넌트에서 숫자값을 전달할때는 {}로 감싸줘야한다.
- 사용자정의로 만든 매개변수로 값 전달하는것도 가능하다.
- 태그를 만들어서 사용하는것도 가능하다.
- 매개변수로 css속성받을 받았을 경우 적용시킬때 {}안에 넣어서 적용해야한다.<h1 style={{color}}>-->여기서 color는 배경색을 뜻하는 약속된 변수다.
- 스프레드 연산자를 통해서 값을 뿌리며서 전달할 수 있다(compoent03_스프레드연산자+length/App.js확인).
- 매개변수가 배열일 경우 length속성을 통해서 갯수를 구할 수 있다.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
훅(hooks) 
 1. 클래스 컴포넌트에서는 생성자(constructor)에서 state를 정의하고 setState() 
    함수를 통해서 state를 업데이트 합니다. 이처럼 클래스 컴포넌트에서 사용하는 
    기능을 함수 컴포넌트에서 동일하게 구현할 수 있도록 해주는 기능이 훅(hook)
    이다.
 2. 훅(hooks)은 리액트 v16.8 이후부터 지원하는 기능이다.
 3. Hooks 이라는 영단어는 갈고리라는 뜻을 갖고 있는데, 리액트의 훅도 리액트의
    생명주기 기능에 갈고리를 걸어 원하는 시점에 정해진 함수를 실행되도록 만든
    것이다.
 4. 리액트의 훅(hooks)의 이름은 use로 시작한다

state
 1. 일반적으로 컴포넌트의 내부에서 변경 가능한 데이터를 관리해야 할 경우에
    사용 한다.
 2. 프로퍼티(props)의 특징은 컴포넌트 내부에서 값을 바꿀 수 없다는 것이었다.
 3. 변수의 값을 바꿔야 하는 경우에 state라는 것을 사용한다.
 4. 변수의 값을 저장하거나 변경할 수 있는 객체로 보통 이벤트와 함께 사용된다.
 5. 컴포넌트에서 동적인 값을 상태(state)라고 부르며, 동적인 데이터를 다룰 때 
    사용된다

 훅의 종류
▪ useState
▪ useEffect
▪ useMemo
▪ useCallback
▪ useRef

useState
 함수 컴포넌트에서 가변적인 상태를 처리해주는 훅이다.
 const [ 변수명, set함수명 ] = useState( 초기값 )
 1. useState()에 초기값을 넣어서 호출하면, 배열이 리턴 되어서 나온다.
 2. 리턴되는 배열의 첫 번째 항목은 state로 선언된 변수이고, 두 번째 항목은
    해당 state의 set함수이다.


