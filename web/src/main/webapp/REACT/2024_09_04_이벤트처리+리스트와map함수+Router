이벤트 처리
- event01/Reservation.js
1. 이벤트를 설정하지 않으면 텍스트 입력이나 체크박스 체크도 작동하지 않는다.
2. 반드시 이벤트 설정을 하여서 변화된 값을 value값에 연결해 줘야한다.
3. 체크박스는 누르는 순간 값이 바뀌고 그 다음에 change함수에서 입력된 코드를 실행하므로벤트 처리

- event01/Reservation.js
1. 이벤트를 설정하지 않으면 텍스트 입력이나 체크박스 체크도 작동하지 않는다.
2. 반드시 이벤트 설정을 하여서 변화된 값을 value값에 연결해 줘야한다.
3. 체크박스는 누르는 순간 값이 바뀌고 그 다음에 change함수에서 입력된 코드를 실행하므로 state에 변화된 값을 그냥 e.target.checked로 넘겨줘야 한다.

* state값에 변화가 발생하는 순간 change함수를 먼저 실행한 후에 랜더링을 진행한다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
리스트

map함수
배열에 저장된 원소값을 반복적으로 구해오는 함수

subject.map((name, index)=>{             
<li key={index}>{name}</li>
 })

- list01/Main.js
1. JSX 구문 안에서 javascript 구문은 { }으로 감싸져야 합니다.
2. render() 의 return값은 항상 한 덩어리여야 합니다.
3. key값은 구분만을 위해 존재한다.

- list01/AttendanceBook.js
1. 리스트 안에 임의의 값을 설정해서 불러올수도 있다. {id:1,name:'홍길동'}, <li key={student.id}>{student.name}</li>
2. 리스트 안에 요소들은 사용자 정의의 임의의 값을 반드시 가져야할 필요는 없음
3. 중간에 새로운 사용자 정의의 임의의 값을 넣을 수도 있음

-list02/App.js+list02/Main1.js+list02/Main2.js+list02/Main3.js
1. const nameList1=names1.map(   (name)      =>       (< Main1     name                            ={name}/>));
                              매개변수name->변경가능         props속성중하나인name->변경불가      매개변수name->변경가능
   const nameList1=names1.map((n)=>(< Main1 name={n}/>)); 이런식으로 쓸수도 있다.
2. 2차원 배열일때는  const nameList2=names2.map((v)=>(<Main2 name={v[0]} age={v[1]}/>));이런식으로 전달 한다.
3. 사용자 정의 변수를 선언했을땐 const nameList3=names3.map((v)=>(<Main3 name={v.userName} age={v.age}/>));이런식으로 전달가능하다.
4. 여기서 map((v)=> 코드에 매개변수 v는 리스트의 요소를 1개씩 차례로 가져오는 것이다.
5. filter함수를 통해서 조건을 만족하는 데이터만 전달할 수 있다.
6. App.js코드상에 nameList4를 let로 선언한 이유는 다음 코드에 재사용하기 위해서다(const는 재사용안됌)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Router
React Router
 1. 라우팅이란 사용자가요청한URL에따라해당URL에맞는페이지를
보여주는것을의미한다.
 2. 리액트에서는 라우팅 관련 라이브러리가 많이 있는데, 이중 가장 많이  
사용되는 리액트 라우터(React Router)를 사용해보자.
 3. React-Router는 각각의 url에 따라 선택된 데이터를 하나의 페이지에서   
렌더링 해주는 라이브러리 이다.

<BrowserRouter>
 - React Router기능을 구현할 때 가장 바깥쪽에 사용하는 태그이다.

<Routes>
- <Routes>태그는 여러 Route를 감싸고 있고 그 중 규칙에 일치하는Route
  하나만을렌더링시켜주는역할을한다

<Route>
 1. Route태그는 path속성에 경로, element속성에는 컴포넌트를 넣어 준다.
 2. 형식 : <Route   path="경로"  element={<컴포넌트 />} />
           <Route   path="/"   element={<Home />} />
           <Route   path="/about"  element={<About />} />

<Link>
 1. 웹 페이지에서는원래링크를보여줄때a태그를사용 하지만a태그는클릭시 페이지를새로불러오기 때문에 React Router에서는 사용하지 않는다. 
2. Link 태그는 a태그와 비슷한 기능이지만, History API를 통해 브라우저 주소의 경로만바꾸는기능이내장되어있다. 
3. 형식 : <Link to="경로">링크명</Link>
          <Link to="/">홈</Link>
          <Link to="/about">소개</Link></li>
4. Link 태그를 사용하기 위해서는 import 를 하고 사용해야 된다.
 import { Link } from 'react-router-dom';
