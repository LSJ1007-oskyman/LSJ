* JPA설정시 application.properties파일에 
  spring.jpa.hibernate.ddl-auto=update 부분에서 create->매번 새로 생성,create-drop->생성하고 끝날때 삭제 , update->없으면 만들고 있으면 그대로둠 ,none->아무것도 안함

* 알아두어야할 anotation
@Entity : 해당 클래스를 Entity 클래스로 설정
@Table(name=“members”) : members 테이블 생성
@Id : 기본키 설정

* repository 상속받는 메서드
@Repository
public interface MemberRepository extends JpaRepository<Member, String>{
// public Member save(Member member); // 회원가입, 정보수정
// public Optional<Member> findById(String id); // 로그인, 수정폼
// public void delete(Member member); // 회원탈퇴
}

* 게시판 repository
  JPQL,QueryDSL --->동적쿼리와 같은 사용자 지정 쿼리를 할때 이용하는 방법
package com.example.demo.repository;

import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import com.example.demo.domain.Board;

@Repository
//public interface BoardRepository extends CrudRepository<Board, Integer>{
	public interface BoardRepository extends JpaRepository<Board, Integer>{

//	public Board save(Board board);			// 글작성, 글수정	
//	public long count();					// 글 갯수 
//	public void delete(Board board);		// 글삭제 
	public Board findByNo(int no);			// 상세 정보	
	
	// JPQL
	@Query(value="select * from (select rownum rnum, board.* from " + 
			"	  (select * from boards order by no desc) board ) " + 
			"	  where rnum >= ((:page-1) * 10 + 1) and rnum <= (:page * 10)"			
			, nativeQuery = true) <--nativeQuery = true : 본래는 JPQL의 문법을 써야하는데 이걸쓰면 본래 알던 SQL문법을 사용하겠다는 의미이다.
	public List<Board> findAll(@Param("page")  int page);	// 전체 목록 검색	
}
