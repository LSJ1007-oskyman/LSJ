class Vehicle{
	public void run() {
		System.out.println("차량이 달립니다.");
	}
}

class Driver{
	public void Driver(Vehicle vehical) { //업캐스팅을 통해서 자동형변환을 하여 매개변수를 받음->본래는 Vehicle객체만 받을 수 있으나 Bus객체는 Vehicle객체의 자식으로서 업캐스팅을 통하여 받을 수 있다.
		vehical.run();
	}
}

class Bus extends Vehicle{

	@Override
	public void run() {
		// TODO Auto-generated method stub
		System.out.println("버스를 달립니다.");
	}
	
}

Bus bus = new Bus();
driver.Driver(bus);<---업캐스팅을 통해서 자동형변환을 하여 매개변수를 줌

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
추상클래스의 추상메서드를 하위 자식 클래스들은 반드시 오버라이딩 해야한다.

추상클래스는 자체적으로 객체 생성이 불가능하므로 생성자를 가질 수 없다.
추상클래스는 자체적으로 객체 생성이 불가능하므로 상속받는 클래스가 반드시 필요하다.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
인터페이스
1.  인터페이스는 상수 와 추상메소드로 구성되어있다. 자바 8부터는 디폴터 메소드, 정적 메소드도 사용가능
public interface Inter01{
	int a = 10; //상수(public static final생략가능)
	void check(); //추상메소드(public abstract 생략가능)
}
-----> 인터페이스는 일반 메소드를 가질 수 없다.

2. 인터페이스를 상속받을때는 implements로 상속을 받는다.

3. 인터페이스를 상속받은 일반 클래스는 인터페이스 안에 들어있는 추상 메소드를 반드시 오버라이딩해야한다.
interface A{
 public abstract void check();//추상메소드(public abstract 생략가능)
}
class S implement A{
	public void check() {// 위에 인터페이스에서는 생략가능하나 클래스에서는 public을 생략할 수 없다.-->오버라이딩할때 더 강하게 접근제어할수없다.
	}
}

4. 인터페이스는 다중상속을 허용한다.

5. 추상클래스와 인터페이스를 모두 상속 받는 경우에는 추상클래스를 먼저 상속을 받고, 인터페이스는 그 다음으로 상속 받아야 한다.(순서 바뀌면 안됌)
interface A{}
abstract class b{}
class S extend B implement A{}

6.인터페이스끼리 상속을 받을떄는 extends로 상속 받는다.
interface A{}
interface B{}
interface C extends A,B{}
