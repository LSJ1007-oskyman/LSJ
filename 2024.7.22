*예외 발생하지 않으면 try쪽만 실행되고 catch쪽은 실행되지 않는다.
*예외 발생시 발생한 줄 아래쪽 코드는 실행되지 않는다.

*멀티 예외처리
1. 예외가 발생할 가능성이 있는 코드가 여러개 있을 겅우에, 각 예외 상황에 맞는
   예외 메세지를  출력 할때 주로 사용한다.
2. 멀티 예외처리 코드 있을 경우에도 가장 먼저 발생하는 예외 처리 1개만 처리된다.

*Exception예외 클래스가 하위 예외클래스들을 모두 가지고 있기 때문에 가장 마지막에 정의해야한다.

*finally안에 들어 있는 내용으 예외가 발생하든,발생하지 앉든 무조건 실행

*throws를 통해서 메서드 마다 예외처리 하는게 아니라 호출한곳에서 한번에 예외처리를 할 수 있다.

public class ThrowsExceptionHandling1 {
	//occurException()를 호출한 곳으로 예외처리를 양도 하겠다는 의미

	*throws s가 들어감에 유의하자
	*throw는 사용자가 일부러 예외를 발생시킬때 사용한다.
	public void occerException() throws ArithmeticException{
		int result = 3/0;
		System.out.println(result);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ThrowsExceptionHandling1 te = new ThrowsExceptionHandling1();
		try {
			te.occerException();
			
			
		//반드시 위에 양도한 오류종류와 맞아야한다.
		//최상위 클레스인 Exception으로는 가능
		}catch (ArithmeticException ae) {
			System.out.println("Exception이 발생 : "+ae.toString());
			System.out.println("0으로 나눌 수 없습니다.");
		}

	}

}
