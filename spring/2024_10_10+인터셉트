@RestController
1. 스프링 4.x 부터 지원하는 어노테이션
2. @RestController = @Controller + @ResponseBody
3. 비동기적으로 데이터 전송

* 인터셉트 사용 이유
- 대표적인 예로 로그인 여부를 확인해서 각 페이지별로 이를 처리하는것은 비효율적이여서 로그인 세션여부를 따져서 세션이 없을 경우 인터셉트하여 처리한다.

* servlet-context 인터셉트 설정 
- <!-- Interceptor설정 -->	
	<beans:bean id="lc" class="com.ch.ch07.LoginCheck"/>  <---LoginCheck으로 이동하는 빈 객체 생성
	<interceptors>
		<interceptor>
			<mapping path="/upload.do"/>  <---upload.do서비스 요구시에
			<beans:ref bean="lc"/> <----LoginCheck으로 이동
		</interceptor>
	</interceptors>
❖ 인터셉터구현방법
1. abstract class  HandlerInterceptorAdapter 클래스를 상속 받아서 구현
2. interface  HandlerInterceptor 인터페이스를 상속 받아서 구현

* 인터페이스로 생성시 아래 메서드 반드시 오버라이드 해야한다. 각각의 메서드는 인터셉트 시기에 따라 나눠지는 메서드이다.
⚫ boolean preHandle()  <---보통 이걸 많이 사용
⚫ void  postHandle()
⚫ void  afterCompletion()

* 인터셉터 인터페이스로 생성
public class LoginCheck implements HandlerInterceptor {
 public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)
 throws Exception {
 }
 public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)
 throws Exception {
 }
 // 지정된 컨트롤러의동작이전에가로채는역할(세션이없으면, 로그인폼으로이동하도록해준다)
 public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object arg2) throws Exception {
 HttpSession session = request.getSession();
 if (session.getAttribute("id") == null) {
 response.sendRedirect("loginForm.do");
 return false;
 }
 return true;
 }
 }


* 파일업로드 방법
1. pom에 파일업로드 라이브러리넣기
2. upload파일 만들어놓기
3. form태그에 enctype="multipart/form-data"속성을 해놓고 반드시 post방식으로 전달
