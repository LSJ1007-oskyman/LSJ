* 서버가 요청을 받으면 web.xml이 시작되면서 매핑된 DispatcherServlet으로 이동되며 appServlet안에 ervlet- 
  context(spring환경설정파일),root-context(DB연동 환경설정파일)을 실행시켜준다. 이후에 어노테이션을 통해서 
  @controller가서 정확이 어떤 요청인지 구분하여 서비스 결과값을 modal이나 view형태로 DispatcherServlet반환하 
  고,DispatcherServlet은 반환된 값을 알맞은 뷰 파일에 전달하고, 뷰파일은 그 값들을 화면에 출력하는 형태이다.

* web.xml
 - front controller인 DispatcherServlet(appServlet)을 매핑(springtest 파일에서는  /로 해놔서 모든 요청을 받아도 DispatcherServlet(appServlet)으로 찾아가게 해준다)
 - 톰캣이 실행되면서 실행된다
 - 뷰의 환경설정 파일
 - servlet-context(spring환경설정파일),root-context(DB연동 환경설정파일)을 실행시켜준다.(이 둘은 자동으로 실행되지 않아 xml안에 들어가 있다.)

* servlet-context
 - spring환경설정파일
 - 이름과 위치를 사용자 마음대로 지정할 수 있다.(web.xml은 안됌)

* Handler Mapping는 이제는 어노테이션 @RequestMapping를 통해서 기능을 수행한다.

* viewResolver는 servlet-context(spring환경설정파일)안에 있는 prefix와 suffix값을 반환된 뷰 파일이름값에 붙여서
  해당 뷰파일까지 이동할수 있게 해준다.

IoC (Inversion of Control)
⚫ 기존에 개발자들이 빈 객체를 관리해오던 개념에서 빈 관리를 컨테이너에서 처리한다는 의미
⚫ 개발자가 코드의 제어흐름을 처리하지 않고, 스프링프레임워크가객체의라이프사이클 및 실행흐름을 관리한다.
- 지금까지 시스템은 new연산자로 해당 클래스를 불러오거나 interface를 통해서 원하는 메서드를 불러와서 실행했는데 이는
  해당 클래스와 시스템의 의존성을 높여서 바람직하지 않다.
- spring에서는 클래스 생성과 DI를 XML파일에서 실행하여 개발자가 직접 제어 흐름을 제어하는 것이 아니라, 외부의 프레임워크나 라이브러리가 제어 흐름을 대신하게 한다.

DI
 - 하는 일은 자바코드에서 setter메소드로 필드값을 설정하는 것과 같다.
 - 중요한것은 IoC에 따라서 외부의 프레임워크나 라이브러리에서 필드값 설정이 이루어진다는 것이다.
 - DI방법은 크게 2가지 이다.
   ➢ Constructor DI(Dependency Injection)
   빈 간의 의존 관계를 설정하기 위해 생성자를 이용
   
   ➢ Setter DI(Dependency Injection)
   빈 간의 의존 관계를 설정하기 위해 setter 메소드를 이용
 
 - 정확히 설명하면 하는 일은 자바코드에서 setter메소드로 필드값을 설정하는 것과 같으나 IoC에 따라서 외부의 프레임워크나 라이브러리에서 필드값 설정이 이루어지는데
   bean객체에서 property태그나 constructor태그를 통해서 필드값을 설정한다.


* classpath는 resources파일을 의미한다.

* 아래처럼 bean객체를 ref로 불러올수도 있다.(ch01/sample09)
  <bean id="mb" class="sample09.MessageBeanImpl">
		<property name="name" value="홍길동"></property>
		<property name="greet" value="Hello !"></property>
		<property name="output" ref="out"></property>
	</bean>
	<bean id="out" class="sample09.FileOutputer">
		<property name="fileName" value="test.txt"></property>
	</bean>

* Controller -> Service -> Dao 이 순서가 중요하다.

* DTO객체를 만들때 DTO객체 자체는 보이지 않게 Object클래스를 상속받으므로 toString을 오버라이딩 할 수 있다.
 - 

* 그런데 매번 빈 객체를 만들어서 주입하자니 너무 양이 많아서 어노테이션으로 처리할때가 많다(더이상 빈 객체를 설정하지 않는다.)
 - ProductService ps = ac.getBean(ProductService.class); -> 더이상 빈 객체가 없으므로 이렇게 불러온다.
 - <context:component-scan base-package="sample13"/> --->base-package는 최상위 자바 폴더를 의미하므로 반드시 base-package이 이정하는 폴더 아래에 자바파일이 존재해야 주입받는다.
   1. sample13 패키지 하위 클래스를 스캔한다는 의미를 가진다.
   2. @Component, @Controller, @Service, @Repository 어노테이션 붙어있는 클래스는 @Autowired 어노테이션을 이용해서 필요한 빈 객체를 setter 메소드 없이 주입을 받는다.
   예)  @Component //위에 조건에 만족한다
	public class ProductServiceImpl implements ProductService {
		@Autowired   //DAO객체로 넘어가야하므로 DAO객체를 setter메소드 없이 주입받는다.
		private ProductDao pd;

		public Product getProduct() {
		return pd.getProduct("짜장면");
		}
	}

