자식의 생성자를 호출하면 부모의 기본생성자가 자동으로 호출된다.
만약 부모의 매개변수를 가지는 생성자를 호출하고 싶으면 super를 통해서 호출해야한다.

자식이 부모의 필드값 변수를 재정의 하면 재정의한 값만 나오며 
본래 부모의 필드값 변수는 은닉변수가 되어서 super를 통해서만 호출가능하다.

자식이 부모의 메서드를 재정의하는 것을 메서드 오버라이딩이라고 하며
재정의한 메서드만 불러오며 부모의 메서드를 부르고 싶으면 super를 통해서 호출해야한다.

레퍼번스 형변환(예) : List<> al = new ArrayList<>();<--업케스팅
ArrayList는 List의 자식으로 리스트는 추상화클래스 인터페이스
업케스팅되면 부모에게 상속받은 메소드만 사용가능하며 자식클래스의 메소드는 호출못한다.
그러면 왜 List로 업캐스팅하여 ArrayList를 사용하는가?


1. List의 메서드는 문제 없이 사용 가능하다!
우선, List로 선언한 변수에 ArrayList를 구현체를 생성해 할당하면
List 안에 선언된 추상 메서드들을 ArrayList가 구현한 방식대로 사용할 수 있습니다.

이해를 돕기 위해 예시를 들겠습니다.

List에 add, size 라는 추상 메서드가 선언이 되었다고 가정하겠습니다.
그리고 ArrayList에 add, size라는 메서드가 구현이 되었고,
추가로 addSize라는 메서드도 새로 구현이 되었다고 하겠습니다.


그럼 List 타입으로 선언된 stringList는 add와 size라는 메서드를 사용할 수 있습니다.
그리고 그것을 사용하면, ArrayList에서 구현한 방식대로 동작합니다.

 
하지만 여기서 문제가 발생하는데,
List에는 addSize라는 메서드가 선언되지 않았기 때문에,
stringList는 ArrayList의 addSize 메서드를 사용할 수 없습니다.


그렇지만, 대개 ArrayList에서 새로 선언한 메서드는 잘 사용되지 않고,
List 인터페이스에 선언된 메서드만으로 충분하기 때문에 큰 문제가 없다고 합니다!







2. (중요!) 다형성 부여 (+ 의존 관계 역전 원칙)
다형성이란 '하나의 객체가 여러 가지 타입을 가지는 것'을 의미합니다.

List<String> stringList = new ArrayList<>();

public int getFirstValueOfList(List stringList) {
	return stringList.어쩌구();
}

위 코드를 살펴보겠습니다.
stringList는 List 타입이지만, ArrayList로 구현되었습니다.
그런데, 자료의 추가, 삭제를 빠르게 하려고 LinkedList를 사용하고 싶어진다면 어떡할까요?

 

// List<String> stringList = new ArrayList<>();
List<String> stringList = new LinkedList<>();


public int getFirstValueOfList(List stringList) {
	return stringList.어쩌구();
}
구현체만 ArrayList에서 LinkedList로 변경해주면 끝입니다.
 
하지만, stringList의 타입이 List가 아닌 ArrayList였다면??

// List<String> stringList = new ArrayList<>();
ArrayList<String> stringList = new LinkedList<>(); // 컴파일 에러 발생


public int getFirstValueOfList(ArrayList stringList) {
	return stringList.어쩌구();
}

ArrayList 타입에는 LinkedList 구현체를 할당할 수 없어서 컴파일 에러가 발생합니다.
코드가 복잡할수록 이 문제는 심각해집니다.

따라서 stringList를 List로 선언하고,
인자로 받을 때도 List로 받는 것입니다.

후에 stringList의 구현체가 변경되어도,
stringList와 관련한 메서드들을 수정할 필요가 없어지기 때문이죠.



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
다운캐스팅을 할 경우 부모에게 상속받은 메서드와 자식의 메소드 모두 사용가능하다.


